from aiogram import F, Router, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
import app.keyboards as kb
from better_profanity import profanity
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
import random
from app.blackjack import start_blackjack, choose_bet, hit, stand
from app.roulette import start_roulette_game, spin_roulette, RouletteStates
from app.currency import get_rate
router = Router()

class Register(StatesGroup):
    name = State()
    age = State()
    passport = State()
    number = State()

class Balance(StatesGroup):
    amount = State()

class ExitCasino(StatesGroup):
    roulette = State()

class Blackjack(StatesGroup):
    set_bet = State()
    playing = State()

class CurrencyStates(StatesGroup):
    waiting_for_pair = State()


user_balances = {}


@router.message(CommandStart())
async def cd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –∫–∞–∑–∏–Ω–æ!\n'
                         '–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞, –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã.', reply_markup=kb.start)

@router.callback_query(F.data == "info")
async def show_rules(callback: CallbackQuery):
    rules_text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –∫–∞–∑–∏–Ω–æ:\n"
        "1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100 –º–æ–Ω–µ—Ç.\n"
        "2. –í—ã–π—Ç–∏ –∏–∑ –∫–∞–∑–∏–Ω–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í—ã —É–≤–µ–ª–∏—á–∏–ª–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å (–°—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π) –≤ 3 —Ä–∞–∑–∞,"
        " –ª–∏–±–æ —Å—ã–≥—Ä–∞–≤ –≤ –†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É.\n"
        "3. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –í—Ç–æ—Ä–æ–µ - –†–∞—Å—Å—Ç—Ä–µ–ª.\n"
        "4. –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã 3 –ª–∏—Ü–∞–º, –Ω–∞ –≤–∞—Å –±—É–¥—É—Ç –≤–∑—è—Ç—ã –º–∏–∫—Ä–æ–∫—Ä–µ–¥–∏—Ç—ã.\n"
        "–£–¥–∞—á–∏!"

    )
    await callback.message.edit_text(rules_text, reply_markup=kb.rules_keyboard)

@router.callback_query(F.data == 'games')
async def return_to_menu(callback: CallbackQuery):
    await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.games)


#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

@router.callback_query(F.data == 'register')
async def register(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Register.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    if profanity.contains_profanity(message.text):
        await message.reply("–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(name=message.text)
    await state.set_state(Register.age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")

@router.message(Register.age)
async def register_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25")
        return
    age = int(message.text)
    if age < 18:
        await message.reply("–í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 18 –ª–µ—Ç –∏–ª–∏ –±–æ–ª—å—à–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return

    await state.update_data(age=age)
    await state.set_state(Register.passport)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ xxxx xxxxxx:")

@router.message(Register.passport)
async def register_passport(message: Message, state: FSMContext):
    text = message.text.strip().replace(" ", "")
    if not (text.isdigit() and len(text) == 10):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü—Ä–∏–º–µ—Ä: '1234 567890'")
        return

    await state.update_data(passport=message.text)
    await state.set_state(Register.number)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=kb.get_number)

@router.message(Register.number, F.contact)
async def register_number(message: Message, state: FSMContext):
    await state.update_data(number=message.contact.phone_number)
    data = await state.get_data()
    await message.answer(f'–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–ía—àe –∏–º—è: {data["name"]}\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: '
                         f'{data["age"]}\n–ü–∞—Å–ø–æ—Ä—Ç:{data["passport"]}\n–ù–æ–º–µ—Ä:{data["number"]}',
                         reply_markup=kb.after_register)
    await state.clear()

#–†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º

@router.callback_query(F.data == 'replenishment')
async def replenishment_request(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Balance.amount)
    await callback.message.answer('üí∞–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∞—Ç–Ω—É—é 100 üí∞')


@router.message(Balance.amount)
async def process_replenishment(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 100, 500 –∏–ª–∏ 1000")
        return

    amount = int(message.text)
    if amount % 100 != 0:
        await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 100")
        return

    user_id = message.from_user.id

    if user_id not in user_balances:
        user_balances[user_id] = {"current_balance": 0, "total_replenished": 0}

    user_balances[user_id]["current_balance"] += amount
    user_balances[user_id]["total_replenished"] += amount

    balance = user_balances[user_id]["current_balance"]
    total = user_balances[user_id]["total_replenished"]

    await message.answer(f"üéâ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n"
                         f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
                         f"–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: {total} –º–æ–Ω–µ—Ç", reply_markup=kb.games)
    await state.clear()

@router.callback_query(F.data == 'balance')
async def balance_request(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    balance = user_balances[user_id]["current_balance"]
    total = user_balances[user_id]["total_replenished"]
    await callback.message.answer(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
                                    f"–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: {total} –º–æ–Ω–µ—Ç", reply_markup=kb.after_register)

#–í—ã—Ö–æ–¥

@router.callback_query(F.data == 'exit')
async def exit_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    balance = user_balances.get(user_id, {}).get("current_balance", 0)
    total = user_balances.get(user_id, {}).get("total_replenished", 1)

    if balance / total < 3:
        await state.set_state(ExitCasino.roulette)
        await callback.message.answer(
            '–í—ã —É–≤–µ–ª–∏—á–∏–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —á–µ–º –≤ 3 —Ä–∞–∑–∞, –≤–∞–º –Ω—É–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É, —á—Ç–æ–±—ã —É–π—Ç–∏',
            reply_markup=kb.roulette
        )
    else:
        await callback.message.answer('‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∫–∞–∑–∏–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!')
        await state.clear()

@router.callback_query(F.data == 'shot', StateFilter(ExitCasino.roulette))
async def roulette_shot(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    bullet = random.randint(1, 6)
    if bullet == 1:
        await callback.message.answer('üí• –ë–∞—Ö! –í—ã —É–±–∏–ª–∏ —Å–µ–±—è!', reply_markup=kb.start)
        user_balances[user_id]["current_balance"] = 0
    else:
        await callback.message.answer('–í—ã —Å–º–æ–≥–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –∫–∞–∑–∏–Ω–æ. –î–æ –≤—Å—Ç—Ä–µ—á–∏)))')
    await state.clear()

@router.callback_query(F.data == 'stopexit', StateFilter(ExitCasino.roulette))
async def roulette_stopexit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í—ã —Ä–µ—à–∏–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ –∫–∞–∑–∏–Ω–æ.', reply_markup=kb.games)
    await state.clear()



#–ë–ª—ç–∫–î–∂–µ–∫
class BlackjackStates(StatesGroup):
    set_bet = State()
    player_turn = State()

@router.callback_query(F.data == "blackjack")
async def cb_start_blackjack(callback: CallbackQuery, state: FSMContext):
    await start_blackjack(callback, state, user_balances)

@router.callback_query(F.data.startswith("bet_"))
async def cb_choose_bet(callback: CallbackQuery, state: FSMContext):
    await choose_bet(callback, state, user_balances)

@router.callback_query(F.data == "hit")
async def cb_hit(callback: CallbackQuery, state: FSMContext):
    await hit(callback, state, user_balances)

@router.callback_query(F.data == "stand")
async def cb_stand(callback: CallbackQuery, state: FSMContext):
    await stand(callback, state, user_balances)

#–†—É–ª–µ—Ç–∫–∞

@router.callback_query(F.data == "roulette")
async def cb_start_roulette(callback: CallbackQuery, state: FSMContext):
    await start_roulette_game(callback, state, user_balances)

@router.callback_query(
    F.data.startswith("rl_bet_"),
    StateFilter(RouletteStates.choosing_bet)
)
async def cb_spin_roulette(callback: CallbackQuery, state: FSMContext):
    await spin_roulette(callback, state, user_balances)

@router.callback_query(F.data == "roulette")
async def cb_play_again(callback: CallbackQuery, state: FSMContext):
    await start_roulette_game(callback, state, user_balances)

@router.callback_query(F.data == "menu")
async def cb_return_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.games)




#–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç

@router.callback_query(F.data == "exchange")
async def cb_exchange(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CurrencyStates.waiting_for_pair)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: `rub usd` (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)")


@router.message(CurrencyStates.waiting_for_pair)
async def get_currency_pair(message: Message, state: FSMContext):
    parts = message.text.strip().lower().split()

    if len(parts) != 2:
        await message.answer(
            "–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `rub usd`",
            reply_markup=kb.currency_menu_kb)
        return

    code_1, code_2 = parts
    rate = get_rate(code_1, code_2)

    if isinstance(rate, dict) and "error" in rate:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥—ã –≤–∞–ª—é—Ç.",
            reply_markup=kb.currency_menu_kb)
    else:
        await message.answer(
            f"–ö—É—Ä—Å:\n1 {code_1.upper()} = {rate} {code_2.upper()}",
            reply_markup=kb.currency_menu_kb)

    await state.clear()


#–ë–∞–Ω –∑–∞ –±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞

profanity.load_censor_words()
russian_badwords = ['–ø–æ–ø–∞','–∂–æ–ø–∞' '–¥–µ—Ä—å' '–∫–∞–∫–∞—à–∫–∞', '–¥—É—Ä–∞–∫', '–ø–∏–∑',
                    '–ø–∏–¥','e–±–∞', '—Ö—É', '—Å—É–∫', '–µ–±–ª', '–¥–∞—É', '–±–ª—è'] #—ç—Ç–∞ —à—Ç—É–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤
profanity.add_censor_words(russian_badwords)

@router.message()
async def check_profanity(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_balances:
        user_balances[user_id] = {"current_balance": 0, "total_replenished": 0, "profanity_count": 0}
    else:
        if "profanity_count" not in user_balances[user_id]:
            user_balances[user_id]["profanity_count"] = 0

    if profanity.contains_profanity(message.text):
        user_balances[user_id]["profanity_count"] += 1
        count = user_balances[user_id]["profanity_count"]

        if count == 1:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞!"
                                " –≠—Ç–æ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
        elif count >= 2:
            await message.reply("–†–∞—Å—Å—Ç—Ä–µ–ª.", reply_markup=kb.start)
            user_balances[user_id]["current_balance"] = 0
            user_balances[user_id]["profanity_count"] = 0
